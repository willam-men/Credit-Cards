{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Validation from '../Functions/Validation';\n\nconst useForm = () => {\n  _s();\n\n  // values state that holds all details of a credit card\n  const [values, setValues] = useState({\n    cardName: '',\n    cardNumber: '',\n    cardExpiration: '',\n    cardSecurityCode: '',\n    focus: ''\n  }); // errors state that sends errors for each detail of a credit card\n\n  const [errors, setErrors] = useState({}); // focus effect to flip the card when editing details\n\n  const handleFocus = e => {\n    console.log(e);\n    setValues({ ...values,\n      focus: e.target.name === 'cardSecurityCode' ? 'cvc' : e.target.name\n    });\n  }; // change effect to show real time input\n\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  }; // submit effect to run validation function and show errors \n\n\n  const handleSubmit = e => {\n    // if submit doesn't necessarily occur, don't run the default \n    // actions of validation, which are set to 'false'\n    e.preventDefault();\n    setErrors(Validation(values));\n  }; // return all effects and states with the custom useForm hook\n\n\n  return {\n    handleChange,\n    handleFocus,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\n_s(useForm, \"9QZcQI9ztrKHRtaEb8xkedPk3cg=\");\n\nexport default useForm;","map":{"version":3,"sources":["/Users/willam/Documents/code/React/credit-cards/src/Hooks/useForm.js"],"names":["useState","Validation","useForm","values","setValues","cardName","cardNumber","cardExpiration","cardSecurityCode","focus","errors","setErrors","handleFocus","e","console","log","target","name","handleChange","value","handleSubmit","preventDefault"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAClB;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC;AACjCK,IAAAA,QAAQ,EAAE,EADuB;AAEjCC,IAAAA,UAAU,EAAE,EAFqB;AAGjCC,IAAAA,cAAc,EAAE,EAHiB;AAIjCC,IAAAA,gBAAgB,EAAE,EAJe;AAKjCC,IAAAA,KAAK,EAAE;AAL0B,GAAD,CAApC,CAFkB,CAUlB;;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC,CAXkB,CAalB;;AACA,QAAMY,WAAW,GAAGC,CAAC,IAAI;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAT,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAENM,MAAAA,KAAK,EAAGI,CAAC,CAACG,MAAF,CAASC,IAAT,KAAkB,kBAAnB,GAAyC,KAAzC,GAAiDJ,CAAC,CAACG,MAAF,CAASC;AAF3D,KAAD,CAAT;AAIH,GAND,CAdkB,CAsBlB;;;AACA,QAAMC,YAAY,GAAGL,CAAC,IAAI;AACtB,UAAM;AAAEI,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAkBN,CAAC,CAACG,MAA1B;AACAZ,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,OAACc,IAAD,GAAQE;AAFF,KAAD,CAAT;AAIH,GAND,CAvBkB,CA+BlB;;;AACA,QAAMC,YAAY,GAAGP,CAAC,IAAI;AACtB;AACA;AACAA,IAAAA,CAAC,CAACQ,cAAF;AACAV,IAAAA,SAAS,CAACV,UAAU,CAACE,MAAD,CAAX,CAAT;AACH,GALD,CAhCkB,CAuClB;;;AACA,SAAO;AAAEe,IAAAA,YAAF;AAAgBN,IAAAA,WAAhB;AAA6BQ,IAAAA,YAA7B;AAA2CjB,IAAAA,MAA3C;AAAmDO,IAAAA;AAAnD,GAAP;AACH,CAzCD;;GAAMR,O;;AA2CN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport Validation from '../Functions/Validation';\n\nconst useForm = () => {\n    // values state that holds all details of a credit card\n    const [values, setValues] = useState({\n        cardName: '',\n        cardNumber: '',\n        cardExpiration: '',\n        cardSecurityCode: '',\n        focus: ''\n    })\n\n    // errors state that sends errors for each detail of a credit card\n    const [errors, setErrors] = useState({})\n\n    // focus effect to flip the card when editing details\n    const handleFocus = e => {\n        console.log(e);\n        setValues({ \n            ...values,\n            focus: (e.target.name === 'cardSecurityCode') ? 'cvc' : e.target.name\n        });\n    }\n\n    // change effect to show real time input\n    const handleChange = e => {\n        const { name, value } = e.target\n        setValues({\n            ...values,\n            [name]: value\n        })\n    }\n\n    // submit effect to run validation function and show errors \n    const handleSubmit = e => {\n        // if submit doesn't necessarily occur, don't run the default \n        // actions of validation, which are set to 'false'\n        e.preventDefault()\n        setErrors(Validation(values))\n    };\n    \n    // return all effects and states with the custom useForm hook\n    return { handleChange, handleFocus, handleSubmit, values, errors };\n};\n\nexport default useForm; \n"]},"metadata":{},"sourceType":"module"}